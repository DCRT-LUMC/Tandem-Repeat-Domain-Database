[{"name":"app.R","content":"library(shiny)\nlibrary(ensembldb)\nlibrary(AnnotationHub)\nlibrary(Biostrings)\nlibrary(DT)\n\n# Define UI\nui <- fluidPage(\n  titlePanel(\"Protein Exon Editor\"),\n  \n  sidebarLayout(\n    sidebarPanel(\n      # Input for protein selection\n      textInput(\"proteinInput\", \"Enter Protein ID or Gene Symbol:\", \"KLHL17\"),\n      \n      # Radio buttons to choose search type\n      radioButtons(\"searchType\", \"Search By:\", \n                   choices = c(\"Gene Symbol\" = \"SYMBOL\", \n                               \"Protein ID\" = \"PROTEINID\"),\n                   selected = \"SYMBOL\"),\n      \n      # Action button to trigger search\n      actionButton(\"searchBtn\", \"Search Protein\"),\n      \n      hr(),\n      \n      # Only show when exons are available\n      conditionalPanel(\n        condition = \"output.exonsAvailable\",\n        selectInput(\"exonSelect\", \"Select Exon to Remove:\", choices = NULL),\n        actionButton(\"removeBtn\", \"Generate Modified Sequence\")\n      )\n    ),\n    \n    mainPanel(\n      tabsetPanel(\n        tabPanel(\"Protein Information\", \n                 verbatimTextOutput(\"proteinInfo\")),\n        \n        tabPanel(\"Exon Structure\",\n                 DT::dataTableOutput(\"exonTable\")),\n        \n        tabPanel(\"Sequences\",\n                 h4(\"Original Protein Sequence\"),\n                 verbatimTextOutput(\"originalSeq\"),\n                 \n                 hr(),\n                 h4(\"Modified Protein Sequence (without selected exon)\"),\n                 verbatimTextOutput(\"modifiedSeq\"))\n      )\n    )\n  )\n)\n\n# Define server logic\nserver <- function(input, output, session) {\n  # Initialize database connection\n  ensdb <- reactive({\n    withProgress(message = 'Loading Ensembl database...', {\n      hub <- AnnotationHub()\n      hub[[\"AH119325\"]]  # Human Ensembl database\n    })\n  })\n  \n  # Store protein data\n  proteinData <- reactiveVal(NULL)\n  exonData <- reactiveVal(NULL)\n  \n  # When search button is clicked\n  observeEvent(input$searchBtn, {\n    req(input$proteinInput)\n    \n    # Get protein information based on search type\n    if (input$searchType == \"SYMBOL\") {\n      # Get all transcripts for the gene symbol\n      txs <- transcripts(ensdb(), filter = list(SymbolFilter(input$proteinInput)))\n      \n      # Get proteins for these transcripts\n      if (length(txs) > 0) {\n        prts <- proteins(ensdb(), filter = list(TxIdFilter(txs$tx_id)))\n        proteinData(prts)\n        \n        # Get exons for these transcripts\n        exns <- exonsBy(ensdb(), by = \"tx\", filter = list(TxIdFilter(txs$tx_id)))\n        exonData(exns)\n      } else {\n        proteinData(NULL)\n        exonData(NULL)\n        showNotification(\"Gene symbol not found\", type = \"error\")\n      }\n    } else {\n      # Direct protein ID search\n      prts <- proteins(ensdb(), filter = list(ProteinIdFilter(input$proteinInput)))\n      \n      if (length(prts) > 0) {\n        proteinData(prts)\n        \n        # Get the transcripts for these proteins\n        txIds <- prts$tx_id\n        \n        # Get exons for these transcripts\n        exns <- exonsBy(ensdb(), by = \"tx\", filter = list(TxIdFilter(txIds)))\n        exonData(exns)\n      } else {\n        proteinData(NULL)\n        exonData(NULL)\n        showNotification(\"Protein ID not found\", type = \"error\")\n      }\n    }\n    \n    # Update exon dropdown choices if exons are found\n    if (!is.null(exonData()) && length(exonData()) > 0) {\n      # Get exon IDs and positions for the first transcript\n      firstTx <- names(exonData())[1]\n      exonInfo <- exonData()[[firstTx]]\n      exonChoices <- paste0(\"Exon \", 1:length(exonInfo), \n                           \" (\", start(exonInfo), \"-\", end(exonInfo), \")\")\n      \n      updateSelectInput(session, \"exonSelect\", choices = setNames(1:length(exonInfo), exonChoices))\n    }\n  })\n  \n  # Output protein information\n  output$proteinInfo <- renderPrint({\n    req(proteinData())\n    print(proteinData())\n  })\n  \n  # Display if exons are available\n  output$exonsAvailable <- reactive({\n    return(!is.null(exonData()) && length(exonData()) > 0)\n  })\n  outputOptions(output, \"exonsAvailable\", suspendWhenHidden = FALSE)\n  \n  # Display exon table\n  output$exonTable <- DT::renderDataTable({\n    req(exonData())\n    if (length(exonData()) > 0) {\n      firstTx <- names(exonData())[1]\n      exons <- exonData()[[firstTx]]\n      \n      # Create the exon table\n      data.frame(\n        Exon_Number = 1:length(exons),\n        Exon_ID = mcols(exons)$exon_id,\n        Start = start(exons),\n        End = end(exons),\n        Width = width(exons),\n        Rank = mcols(exons)$exon_rank\n      )\n    }\n  })\n  \n  # Original protein sequence\n  output$originalSeq <- renderText({\n    req(proteinData())\n    if (length(proteinData()) > 0) {\n      return(proteinData()$protein_sequence[1])\n    } else {\n      return(\"No protein sequence available\")\n    }\n  })\n  \n  # Generate modified sequence when button clicked\n  modifiedSequence <- reactiveVal(\"\")\n  \n  observeEvent(input$removeBtn, {\n    req(proteinData(), exonData(), input$exonSelect)\n    \n    # Get the protein sequence\n    protSeq <- proteinData()$protein_sequence[1]\n    \n    # Get the selected exon\n    firstTx <- names(exonData())[1]\n    selectedExonIdx <- as.numeric(input$exonSelect)\n    \n    # Map exon to protein coordinates\n    txId <- proteinData()$tx_id[1]\n    cds <- cdsBy(ensdb(), \"tx\", filter = list(TxIdFilter(txId)))\n    \n    if (length(cds) > 0 && txId %in% names(cds)) {\n      # Get CDS for our transcript\n      txCds <- cds[[txId]]\n      \n      # Get selected exon\n      selectedExon <- exonData()[[firstTx]][selectedExonIdx]\n      \n      # Create a GRanges object with the exon coordinates\n      exonGR <- GRanges(seqnames = as.character(seqnames(selectedExon)),\n                        ranges = IRanges(start = start(selectedExon),\n                                         end = end(selectedExon)),\n                        strand = strand(selectedExon))\n      \n      # Map genomic coordinates to protein\n      protCoords <- genomeToProtein(exonGR, ensdb())\n      \n      if (length(protCoords) > 0 && !is.null(protCoords[[1]])) {\n        # Get the protein coordinates of the exon\n        protStart <- start(protCoords[[1]][1])\n        protEnd <- end(protCoords[[1]][1])\n        \n        # Create modified sequence by removing the exon region\n        if (!is.na(protStart) && !is.na(protEnd) && protStart <= protEnd) {\n          beforeSegment <- substr(protSeq, 1, protStart - 1)\n          afterSegment <- substr(protSeq, protEnd + 1, nchar(protSeq))\n          modifiedSequence(paste0(beforeSegment, afterSegment))\n        } else {\n          modifiedSequence(\"Could not map exon to protein coordinates\")\n        }\n      } else {\n        modifiedSequence(\"Exon mapping to protein failed\")\n      }\n    } else {\n      modifiedSequence(\"No CDS information available for this transcript\")\n    }\n  })\n  \n  # Display modified sequence\n  output$modifiedSeq <- renderText({\n    if (modifiedSequence() != \"\") {\n      return(modifiedSequence())\n    } else {\n      return(\"Select an exon and click 'Generate Modified Sequence'\")\n    }\n  })\n}\n\n# Run the application\nshinyApp(ui = ui, server = server)","type":"text"},{"name":"ensembldb_tests.Rmd","content":"```{r}\nlibrary(ensembldb)\nlibrary(AnnotationHub)\nensdb <- hub[[\"AH119325\"]]\n```\n\n```{r}\ngnm <- GRanges(\"X\", IRanges(start = c(630898, 644636, 644633, 634829),\n                            width = c(5, 1, 1, 3)))\ngnm_prt <- genomeToProtein(gnm, ensdb)\n```\n```{r}\nhub <- AnnotationHub()\nquery(hub, c(\"ensdb\",\"homo sapiens\",\"113\"))\n```\n```{r}\nensdb <- hub[[\"AH119325\"]]\n```\n```{r}\ngnm_prt[[1]]\n```\n```{r}\n# Define the gene symbol for which to retrieve UniProt IDs\ngene_symbol <- \"ANKRD17\"\n\n# Use the 'select' function to query the EnsDb database for UniProt IDs\nresults <- select(ensdb,\n                  keys = gene_symbol,\n                  keytype = \"SYMBOL\",\n                  columns = c(\"GENEID\", \"SYMBOL\", \"UNIPROTID\"))\n\nprint(results)\n```\n```{r}\nresult <- select(ensdb,\n                 keys = \"ENSP00000362175\",     # Replace with your specific protein ID\n                 keytype = \"PROTEINID\",\n                 columns = c(\"PROTEINID\", \"UNIPROTID\", \"UNIPROTDB\", \"UNIPROTMAPPINGTYPE\"))\n\nprint(result)\n\n# If you need protein name aliases, consider querying external resources (e.g., the UniProt API)\n# using the UniProt ID obtained from the EnsDb database.\n```\n\n```{r}\n# KLHL17\ngnm <- GRanges(\"1\", IRanges(start = 32672791, width = 110))\ngnm_prt <- genomeToProtein(gnm, ensdb)\ngnm_prt\n```\n```{r}\nprt <- proteins(ensdb, filter = ProteinIdFilter(names(gnm_prt[[1]])))\n\n# Extract the parts before and after the segment\nbefore_segment <- substr(prt$protein_sequence[2], 1, 367)\nafter_segment <- substr(prt$protein_sequence[2], 405, 425)\n\n# Combine to create sequence with the segment removed\nmodified_sequence <- paste0(before_segment, after_segment)\n\n# Print the modified sequence\ncat(\"Length before removal:\", nchar(prt$protein_sequence[2]), \"\\n\")\ncat(\"Length after removal:\", nchar(modified_sequence), \"\\n\")\n\ncat(\"Original sequence:\")\nprt$protein_sequence[2]\n\ncat(\"Sequence with removed exon:\")\nmodified_sequence\n```\n\n```{r}\nlibrary(shiny)\nrunApp()\n```\n","type":"text"}]
